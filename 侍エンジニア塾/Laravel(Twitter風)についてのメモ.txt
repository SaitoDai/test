View <= Blade = HTML + PHPデータ
BladeはHTMLっぽい見た目だけど違う。
Blade内でPHPの変数などを{{ }}で囲えば出力可。
（例：{{ $post->title }}）
.blade.phpは表示ページの数だけ必要、だからviewesフォルダの中にその分のblade.phpを作らなければならない。

Blade…テンプレートエンジンの一種。
テンプレートエンジン…サーバーサイド言語とHTMLを合体させてビュー表示する仕組み。

ただしページ表示するにはビューの設定だけではダメ。
コントローラをルーティングの設定も必要。



コントローラー…いろいろとアクションを搭載することができる。大きく2つ。
1：use宣言…使う可能性があるクラスがある場合に予め宣言しておく。
2：アクション…メソッド関数のようなもの。種類が決まっている？ヘルパーという似たものもある。違いは不明。
アクションは通常の関数と同じように　public function ...()　と書く。　ヘルパーは別に大丈夫っぽい。



ルーティング…コントローラを選択する役割・設定。
web.php…使いたい「コントローラ」がある場合はこちらでuse宣言。ここでuse宣言しないと、コントローラをartisanして作っても意味ない。
コントローラーのアクション()ごとにルーティング設定可。web.phpで設定。

マイグレーションファイル　→　テーブルの設計書


store()：作成機能のアクション？　(Request $request)　と書いけば{アクションの中}で $request->input('name属性')と書いて、入力内容を取得できる。
インスタンス化$post new POST 


with()メソッド、セッションというところがあるらしく、そこにメッセージを保存できるらしい。第一引数にキー、第二引数にメッセージ。
セッションに保存したメッセージはbladeファイルなどで{{ session('キー') }}で呼び出せる。


view()ヘルパーの第二引数に　compact()関数を指定すると、ビューに変数を渡せるらしい。その際に$は不要。
compact()に使う変数は事前に定義しておくこと。なぜpostと単数形なのかは不明。


route()


update(Post $post)と書けば、Postクラスのインスタンスを受け取ることができるらしい。(Request $requset)もおそらく同じ理屈。


Laravelに限らず、プログラミング用語は言葉で説明する


Bootstrap デザイン系のCSSのフレームワーク
予め用意されているカラーなどがあるので時間短縮になる。


Larabelの課題、gitの教材をやる。
実際に使うコマンドはごくわずか。

Bootstrap
npm installは最初しかけｋない

コマンド、削除系は要注意。慣れているエンジニアでも起こりがち。
コマンドの恐ろしさ。コマンドはミスった時は本当に怖い。メガバンクのエンジニアは2人体制、コマンドを打つ人、それをチェックする人。


基本
相手から自分がGET　自分から相手がPOST
create、editは本来はPOSTでOKのはず。
なのでPOSTはミスると問題。GETはただ「表示されませんでした」となるです。


$post->XXX　に入れたものをsave()で保存。
それをview()に渡すために複数あるためcompact()を使う。


Validateに引っかかると、MessageBagの$errorsにエラーメッセージ（Laravelで既に用意している）が入るらしい。
any()メソッドで1つでもエラーがあればtrueを返せる。all()メソッドでエラーメッセージを複数呼び出せる。


value="{{ old('title', $post->title) }}"　と書けば、初期値を保存し（左）つつ、引数がある場合には引数も引き継げる（右）。
左から優先度高めなイメージ。

●vite.config.jsは、ビルドツール「Vite」の設定用ファイル。
●app.jsは？謎

all()　←→　latest()->get()