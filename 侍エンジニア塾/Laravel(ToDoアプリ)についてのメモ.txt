
パッケージ「Laravel UI」を使えば認証機能が使える？
bootstrap に --auth オプションを付けることで、認証機能も加えられる。

packing.json に botstrap を追加。したら npm install。

_variables.scssはBootstrapの変数を設定するためのファイル。
背景色やフォントサイズ、フォントなどを変えられる。

scssファイルを編集したら、必ず npm run build でビルド。

asset() はpublicフォルダから見たときの位置を引数に入れて、画像やcssを読み込むことができる。

Authファサード は、確かインスタンスを作らなくてもクラス関数を使うためのものだった気がする。
Auth::user() と記載すれば、ログイン中のユーザー情報を取得できる。
Auth::user()->goals と記載すれば、ログイン中のユーザーの持つすべての目標を取得できる。
Auth::user_id()と入力すればログイン中のユーザーidを取得できる。
でもなぜ()がつく？



良く分からんが、ルーティングの末尾に ->middleware('auth') と付けると、非ログイン時にログインページに飛ばされるらしい。


migrate ファイルの変数に ->foreignId('xxx')->constrained()->cascadeOnDelete(); とつけると外部キーの設定ができる。

config('ファイル名.キー')
例：config('app.name') の場合、app.php の name の値が返ってくる。
env('XXX') は env ファイルのXXXを返す。

テーブル同士のリレーションシップを完成させるには、それぞれおテーブルに関わるモデルを編集する必要がある。
リレーションシップでは hasMany() と belongsTo() が対の関係。


catコマンドはよくつかうものの1つ。今回は秘密鍵を表示させるもの。
ファイルを全部出す。　例えば1万行のコードがある場合でも


コピペでコマンドはOK。現場でも基本はそう。

基本はテーブルを作るためにCREATE TABLE コマンドが必要、それを押したタイミングで出てくる。

laravel UI をインストールした際に failed_jobs の元のファイルが入っていた可能性。

laravel UI ユーザーインターフェイスのライブラリ

メールサーバーりようするためのパスワードがアプリパスワードとは別、アプリでGmailを利用するためのパスワード、ワンタイムパスワードに近いかも


string('title')である理由は、文字化けしたコードが入ることを防ぐため。
text('title')にすると文字化けしたわけわからないコードもOKになったりします。



フロントエンド層　ミドルウェア層（基盤層）バックエンド層
middleware('auth') は、本来ミドルウェア層で不完全であることを理由にこれを使う。
これを使えばミドルウェア層ではじかれない。
auth は laravelに元から入っているもの。

負荷のかかる処理はコントローラーの役目？


boolean()は1、'1'、true、'true'、'on'、'yes'に対してtrueを返す。


どうやらモーダルを作る仕組みは、class="modal fade" にあるようだ。
それの処理元はおそらくBootstrap


１対多の場合は、多側に外部キーを設定するだけでOK。
しかし多対多ではそれではNG。間に中間テーブルを入れるのが自然。

多対多のリレーションシップではモデルに belongsToMany() を使う。belongsTo() も hasMany() も使わない。

input('id_tags') と複数形で書けば、チェックボックスで複数入れた id を拾って取得できるらしい。

if (!$request->has('done')) フォームなどで値をもっていない場合に真を返す。

has() メソッドでは「その値がフォームから送信されたかどうか」を確認できる。